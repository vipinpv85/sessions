# EASY WAY

## WHEN TO USE
 - application is written from scratch.
 - number of files to build are limited.
 - have limited/simple external dependancy
 - build infrastructure is realtively simple.

## HOW TO GET IT DONE
 - copy an existing Makefile from DPDK like `examples/skeleton` to project folder.
 - identify the src files for custom project
 - add the src files to `SRC-y`
 - update RTE_SDK & RTE_TARGET
 - execute `make`
 - identify the missing compile and linker flags, add the `EXTRA_CFLAGS=` & `EXTRA_LDFLAGS=`
 
bonus: pre-test by passing `make EXTRA_CFLAGS=[application dependant CFLAGS] EXTRA_LDFLAGS=[application depenedant]`.

 
# NEXT BEST WAY

## WHEN TO USE
 - when one plans to use meson, automake, or cmake for upcoming application. This is good point to start
 - has an existing project with Makefile.
 - does not want to `include` or `invoke` DPDK-Makefile
 - wants to have cross-build over native build.
 
## HOW TO GET IT DONE
 - copy  GNU makefile teamplate from `https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html`
 - identify the src files for custom project & add the src files.
 - update RTE_SDK & RTE_TARGET
 - execute `make` for DPDK `example/skeleton`
 - explore `example/skeleton/build.basicfwd.cmd` for obtaining `CFLAGS` & `LDFLAGS`
 - add dependency to Makefile temaplate for DPDK
 

# CHALLENGING WAY

## WHEN TO USE
 - project already exist and need to add DPDK.
 - build infra-strucure is complex and heavily depended on dynamic depedency discovery.
 - one needs a challenge to solve
 
## HOW TO START with cmake (example suricata)
 - download a copy of `https://www.openinfosecfoundation.org/download/suricata-4.1.8.tar.gz.sig`
 - un tar the contents to the desired location.
 - inspect the `configure.ac`
   1. search for keywork `enable`
   2. refer `autoconf` for supported strings and keywords
   3. build DPDK logic check by `AC_ARG_ENABLE`and `AS_HELP_STRING` while passing default `enable_dpdk=no`
   4. add test for DPDK by `AS_IF`and allowing `AC_DEFINE`
   5. add test echo via `echo " reached DPDK configuration "`
   6. run `autoconf; ./configure --enable-dpdk`
   7. Cross check the results for `results`.
 
 
 ## trciky part of DPDK 
  - bunch of CFLAGS & LDFLAGS, which one will I choose.
  - different vendor PMD
  - many libraries and wrappers
  - Compiler flags

```
-march=native -m64
-march=native 
-DRTE_MACHINE_CPUFLAG_SSE -DRTE_MACHINE_CPUFLAG_SSE2 -DRTE_MACHINE_CPUFLAG_SSE3 -DRTE_MACHINE_CPUFLAG_SSSE3 -DRTE_MACHINE_CPUFLAG_SSE4_1 -DRTE_MACHINE_CPUFLAG_SSE4_2 
-DRTE_MACHINE_CPUFLAG_AVX -DRTE_MACHINE_CPUFLAG_AVX2 \
-DRTE_MACHINE_CPUFLAG_AES -DRTE_MACHINE_CPUFLAG_PCLMULQDQ \
-DRTE_MACHINE_CPUFLAG_RDRAND -DRTE_MACHINE_CPUFLAG_RDSEED -DRTE_MACHINE_CPUFLAG_FSGSBASE \
-DRTE_MACHINE_CPUFLAG_F16C \

-O3
-Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wold-style-definition \
-Wpointer-arith -Wcast-align -Wnested-externs -Wcast-qual -Wformat-nonliteral -Wformat-security -Wundef -Wwrite-strings \
-Wdeprecated -Wimplicit-fallthrough=2 -Wno-format-truncation -Wno-address-of-packed-member

-I$RTE_SDK/lib/librte_eal/linux/eal/include \
-DRTE_USE_FUNCTION_VERSIONING \
-I$RTE_SDK/$RTE_TARGET/include -include $RTE_SDK/$RTE_TARGET/include/rte_config.h \
-D_GNU_SOURCE  -W -Wall  -DALLOW_EXPERIMENTAL_API  \
-L$RTE_SDK/$RTE_TARGET/lib -Wl,-lrte_flow_classify -Wl,--whole-archive -Wl,-lrte_pipeline -Wl,--no-whole-archive -Wl,\
--whole-archive -Wl,-lrte_table -Wl,--no-whole-archive -Wl,--whole-archive -Wl,-lrte_port -Wl,--no-whole-archive -Wl,\
-lrte_pdump -Wl,-lrte_ip_frag -Wl,-lrte_meter -Wl,-lrte_fib -Wl,-lrte_rib -Wl,-lrte_lpm -Wl,\
-lrte_acl -Wl,-lrte_power -Wl,-lrte_kni -Wl,\
-lrte_efd -Wl,-lrte_bpf -Wl,-lrte_ipsec -Wl,--whole-archive -Wl,-lrte_cfgfile -Wl,-lrte_gro -Wl,-lrte_gso -Wl,\
-lrte_hash -Wl,-lrte_member -Wl,-lrte_vhost -Wl,-lrte_kvargs -Wl,-lrte_mbuf -Wl,-lrte_net -Wl,-lrte_ethdev -Wl,\
-lrte_cryptodev -Wl,-lrte_security -Wl,-lrte_compressdev -Wl,-lrte_eventdev -Wl,\
-lrte_timer -Wl,-lrte_mempool -Wl,-lrte_stack -Wl,-lrte_mempool_ring -Wl,-lrte_ring -Wl,\
-lrte_pci -Wl,-lrte_eal -Wl,-lrte_cmdline -Wl,-lrte_reorder -Wl,-lrte_sched -Wl,-lrte_rcu -Wl,\
-lrte_bus_pci -Wl,-lrte_bus_vdev -Wl,\
-lrte_mempool_bucket -Wl,-lrte_mempool_stack -Wl,-lrte_pmd_af_packet -Wl,\
-lrte_pmd_i40e -Wl,-lrte_pmd_memif -Wl,-lrte_pmd_null -Wl,-lrte_pmd_pcap -Wl,\
-lpcap -Wl,-lrte_pmd_ring -Wl,-lrte_pmd_tap -Wl,-lrte_pmd_virtio -Wl,-lrte_bus_vmbus -Wl,-lrte_pmd_openssl -Wl,-lcrypto -Wl,\
-lrte_pmd_null_crypto -Wl,-lrte_pmd_crypto_scheduler -Wl,-lrte_pmd_virtio_crypto -Wl,-lrte_pmd_skeleton_event -Wl,\
-lrte_pmd_sw_event -Wl,--no-whole-archive -Wl,-lrt -Wl,-lm -Wl,-lnuma -Wl,-ldl -Wl,-export-dynamic -Wl,\
-export-dynamic -L$RTE_SDK/examples/l2fwd/build/lib -L$RTE_SDK/$RTE_TARGET/lib -Wl,--as-needed"
```
 - choose what is really important for you :)
 - Declare these as `DPDK_CFLAGS` and `DPDK_LDFLAGS`
 - rerun `autconf; ./configure â€“--enable-dpdk`
 - check the result for DPDK enabled build.
 - check the Makefile in `parent` and `src` folder. it will not be reflectd
 - so add `DPDK_CFLAGS = @DPDK_CFLAGS@` and `DPDK_LDFLAGS = @DPDK_LDFLAGS@` in `Makefile.in` retry above steps.
 
